package bookred.admin.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import bookred.admin.dto.AdminRentVO;
import bookred.admin.dto.EtcManageVO;
import bookred.admin.service.EtcManageService;
import bookred.admin.service.RentReturnService;
import bookred.book.command.BookCriteria;
import bookred.book.dto.BookVO;
import bookred.book.service.BookService;
import bookred.member.dto.MemberVO;
import bookred.member.dto.RMVO;
import bookred.member.dto.RentBackVO;
import bookred.member.service.MemberService;

@Controller
@RequestMapping("/admin/bookManage")
public class BookManageController {
	
	@Autowired
	private BookService bookService;
	@Autowired
	private EtcManageService etcManageService;
	@Autowired
	private RentReturnService rentReturnService;
	@Autowired
	private MemberService memberService;
	@RequestMapping("/status")
	public ModelAndView Status(ModelAndView mnv) throws Exception{
		String url = "admin/book/classification/staus";
		
		int allbook = 0;
		List<Integer> numList = new ArrayList<Integer>();
			for (int i = 0; i <= 9; i++) {
				int count = bookService.selectKdcNoCount(i);
				numList.add(i, count);
				System.out.println(numList.get(i));
				allbook += count;
			}
		numList.add(10,allbook);
			
		mnv.addObject("numList", numList);
		mnv.setViewName(url);
		return mnv;
	}

	@RequestMapping("/big")
	public ModelAndView big(BookCriteria cri, ModelAndView mnv) throws Exception{
		String url = "admin/book/classification/big";
		System.out.println(cri.getPerPageNum());
		
		cri.setPerPageNum(10);
		Map<String,Object> dataMap = bookService.getAllBookList(cri);
		
		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		
		
		return mnv;
	}
	
	@RequestMapping("/best")
	public String best() throws Exception{
		String url = "admin/book/recommend/best";
		
		return url;
	}	
	
	@RequestMapping("/recommend")
	public String recommend() throws Exception{
		String url = "admin/book/recommend/recommend";
		return url;
	}	
	
	@RequestMapping("/exRecommend")
	public String exRecommend() throws Exception{
		String url = "admin/book/recommend/exRecommend";
		return url;
	}	
	/* 도서관리 대출 및 반납 */
	@RequestMapping(value = "/rent/getMember", produces = "application/json;charset=utf-8")
	@ResponseBody
	public MemberVO getMember(String id) throws Exception{
		System.out.println(id);
		MemberVO member = memberService.getMember(id);
		return member;
	}
	
	@RequestMapping("/rent")
	public String reservation() throws Exception{
		String url = "admin/book/rentAndReturn/rent";
		
		return url;
	}
	@RequestMapping(value="/rent/lockerList", produces = "application/json;charset=utf-8")
	@ResponseBody
	public List<AdminRentVO> lockerList() throws Exception{
		int rent_code = 3;
		List<AdminRentVO> rentList =  rentReturnService.getLockerRentList(rent_code);
		return rentList;
	}
	@RequestMapping(value="/rent/fieldList", produces = "application/json;charset=utf-8")
	@ResponseBody
	public List<AdminRentVO> fieldList() throws Exception{
		int rent_code = 0;
		List<AdminRentVO> rentList =  rentReturnService.getFieldRentList(rent_code);
		return rentList;
	}
	@RequestMapping(value="/rent/driveList", produces = "application/json;charset=utf-8")
	@ResponseBody
	public List<AdminRentVO> driveList() throws Exception{
		int rent_code = 2;
		List<AdminRentVO> rentList =  rentReturnService.getDriveRentList(rent_code);
		return rentList;
	}
	
	@PostMapping(value="/rent/setStateApprove", produces="application/json;charset=utf-8")
	@ResponseBody
	public String setStateApprove(@RequestBody Map<String,List<RMVO>> dataMap) throws Exception{
		String status = "";
		List<RMVO> rmList = dataMap.get("list");
		for (RMVO rmvo : rmList) {
			rentReturnService.modifyRMStatus(rmvo);
		}
		return "연결성공";
	}
	@PostMapping(value="/rent/setStateReject", produces="application/json;charset=utf-8")
	@ResponseBody
	public String setStateReject(@RequestBody Map<String,List<RMVO>> dataMap) throws Exception{
		String status = "";
		List<RMVO> rmList = dataMap.get("list");
		for (RMVO rmvo : rmList) {
			System.out.println(rmvo.getRent_status());
			rentReturnService.modifyRMStatus(rmvo);
		}
		return "연결성공";
	}
	
	@RequestMapping("/return")
	public String return2() throws Exception{
		String url = "admin/book/rentAndReturn/return";
		
		return url;
	}	
	@RequestMapping(value="/return/list", produces="application/json;charset=utf-8")
	@ResponseBody
	public List<RentBackVO> returnList() throws Exception{
		List<RentBackVO> returnList = new ArrayList<RentBackVO>();
		
		returnList = rentReturnService.getReturnList();
		
		return returnList;
	}
	@PostMapping(value="/rent/setStateReturn", produces="application/json;charset=utf-8")
	@ResponseBody
	public String setStateReturn(@RequestBody Map<String,List<RentBackVO>> dataMap) throws Exception{
		String status = "";
		List<RentBackVO> list = dataMap.get("list");
		for (RentBackVO vo : list) {
			rentReturnService.registReturn(vo.getBook_no());
		}
		return "연결성공";
	}
	@PostMapping(value="/rent/setStateDelay", produces="application/json;charset=utf-8")
	@ResponseBody
	public String setStateDelay(@RequestBody Map<String,List<RentBackVO>> dataMap) throws Exception{
		String status = "";
		List<RentBackVO> list = dataMap.get("list");
		rentReturnService.modifyRentBackDelay(list);
		return "연결성공";
	}
	/* 도서관리 대출 및 반납 */
	
	@RequestMapping("/location")
	public String loacation() throws Exception{
		String url = "admin/book/location/location";
		
		return url;
	}	
	
	@RequestMapping("/locationCode")
	public String locationCode() throws Exception{
		String url = "admin/book/location/locationCode";
		
		return url;
	}	
	
	
	@RequestMapping("/stupid")
	public String stupidBook() throws Exception{
		String url = "admin/book/stupid/stupidBookStatus";
		
		return url;
	}		
	
	@RequestMapping("/stupidBookDone")
	public String stupidBookDone() throws Exception{
		String url = "admin/book/stupid/stupidBookDone";
		
		return url;
	}		
		
//	기타관리 Start
	@RequestMapping("/donation")
	public String donation() throws Exception{
		String url = "admin/book/etc/donation";
		
		return url;
	}	
	
	@RequestMapping("/noRent")
	public ModelAndView noRent(BookCriteria cri, ModelAndView mnv) throws Exception{
		String url = "admin/book/etc/noRent";
		
//		cri.setPerPageNum(10);
		Map<String,Object> dataMap = etcManageService.getAllNoRentList(cri);
		
		
		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		
		return mnv;
	}		
	
	@RequestMapping("/registNoRentBook")
	public String registForm() {
		String url = "admin/book/etc/registNoRentBook";
		
		return url;
	}
	
	@RequestMapping("/regist")
	public String regist(EtcManageVO noRentBook, Model model, RedirectAttributes rttr ) throws Exception{
		String url="redirect:/admin/bookManage/noRent.do";
		
		System.out.println("등록된isbn =" +noRentBook.getBook_isbn());
		System.out.println("등록된상태코드 =" +noRentBook.getState_code());
		
		etcManageService.regist(noRentBook);
		rttr.addFlashAttribute("from", "regist");
		
		return url;
	}
	
	@RequestMapping(value = "/searchBook", method = RequestMethod.GET, produces = "application/json;charset=utf-8")
	@ResponseBody
	public List<BookVO> searchBook(String book_isbn, Model model) throws Exception {
		List<BookVO> dataList = bookService.selectBookByBookIsbn(book_isbn);
		for (BookVO bookVO : dataList) {
			System.out.println(bookVO.getBook_isbn());
			System.out.println(bookVO.getBook_title());
			System.out.println(bookVO.getBook_publisher());
		}
		
		return dataList;
	}
	
	@RequestMapping("/lossBook")
	public ModelAndView lossBook(BookCriteria cri, ModelAndView mnv) throws Exception{
		String url = "admin/book/etc/lossBook";
		
		cri.setPerPageNum(10);
		Map<String, Object> dataMap = etcManageService.getLossBookList(cri);
		
		mnv.addObject("dataMap", dataMap);
		mnv.setViewName(url);
		
		return mnv;
	}		
	
	@RequestMapping("/getBook")
	public String getBook() throws Exception{
		String url = "admin/book/etc/getBook";
		
		return url;
	}		

	@RequestMapping("/registBook")
	public String registBook() throws Exception{
		String url = "admin/book/etc/registBook";
		
		return url;
	}		
	
}
