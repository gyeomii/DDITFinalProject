package bookred.member.service;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import bookred.member.command.RentCriteria;
import bookred.member.command.RentPageMaker;
import bookred.member.dao.RentBackDAO;
import bookred.member.dto.CountVO;
import bookred.member.dto.RentBackVO;
import bookred.member.dto.RentBookVO;

public class RentBackServiceImpl implements RentBackService {

	private RentBackDAO rentBackDAO;

	public void setRentDAO(RentBackDAO rentBackDAO) {
		this.rentBackDAO = rentBackDAO;
	}

	@Override
	public RentBackVO getRentByRentNo(int rent_no) throws SQLException {
		RentBackVO rent = rentBackDAO.selectRentByRentNo(rent_no);
		return rent;
	}

	@Override
	public Map<String, Object> getRentList(RentCriteria cri, String mem_id) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();		

		List<RentBookVO> rentList = rentBackDAO.selectLentList(cri, mem_id);
		
		int totalCount = rentBackDAO.selectLentListCount(cri,mem_id);
		RentPageMaker pageMaker = new RentPageMaker();

		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		dataMap.put("rentList", rentList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;
	}

	@Override
	public void RentDateExtention(RentBookVO rentBook) throws SQLException, ParseException {
		
		RentBookVO RentBookVO = rentBackDAO.selectReturnDatePlus7day(rentBook);
		System.out.println("due_daete: "+ RentBookVO.getDue_date() );
		
		rentBackDAO.updateRentDateExtention(RentBookVO);
		System.out.println("날짜 업데이트 완료!");
	}

	@Override
	public Map<String, Object> getAllReturnList(RentCriteria cri, String mem_id) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		List<RentBackVO> returnList = rentBackDAO.selectAllReturnList(cri, mem_id);
		
		int totalCount = rentBackDAO.selectAllReturnListCount(cri,mem_id);
		RentPageMaker pageMaker = new RentPageMaker();

		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		dataMap.put("returnList", returnList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;
	}

	@Override
	public int getRentNotReturn(String mem_id) throws SQLException {
		int count = rentBackDAO.selectRentNotReturn(mem_id);
		return count;
	}

	@Override
	public RentBackVO getSelectedRentBookList(int book_no) throws SQLException {
		
		RentBackVO selectBackListByBookNo = rentBackDAO.selectBackListByBookNo(book_no);
		
		return selectBackListByBookNo;
	}

	@Override
	public List<Integer> getRentList(String mem_id) throws SQLException {
		List<RentBackVO> rentLsit = rentBackDAO.selectRentList(mem_id);
		int c0 = 0;
		int c100 = 0;
		int c200 = 0;
		int c300 = 0;
		int c400 = 0;
		int c500 = 0;
		int c600 = 0;
		int c700 = 0;
		int c800 = 0;
		int c900 = 0;
		
		for (RentBackVO rentBackVO : rentLsit) {
			if(rentBackVO.getKdc_no() > 0 && rentBackVO.getKdc_no() < 100) {
				c0++;
			}else if(rentBackVO.getKdc_no() >= 100 && rentBackVO.getKdc_no() <200) {
				c100++;
			}else if(rentBackVO.getKdc_no() >= 200 && rentBackVO.getKdc_no() <300) {
				c200++;
			}else if(rentBackVO.getKdc_no() >= 300 && rentBackVO.getKdc_no() <400) {
				c300++;
			}else if(rentBackVO.getKdc_no() >= 400 && rentBackVO.getKdc_no() <500) {
				c400++;
			}else if(rentBackVO.getKdc_no() >= 500 && rentBackVO.getKdc_no() <600) {
				c500++;
			}else if(rentBackVO.getKdc_no() >= 600 && rentBackVO.getKdc_no() <700) {
				c600++;
			}else if(rentBackVO.getKdc_no() >= 700 && rentBackVO.getKdc_no() <800) {
				c700++;
			}else if(rentBackVO.getKdc_no() >= 800 && rentBackVO.getKdc_no() <900) {
				c800++;
			}else if(rentBackVO.getKdc_no() >= 900 && rentBackVO.getKdc_no() <1000) {
				c900++;
			}
		}
		
		List<Integer> countList = new ArrayList<Integer>();
		countList.add(c0);
		countList.add(c100);
		countList.add(c200);
		countList.add(c300);
		countList.add(c400);
		countList.add(c500);
		countList.add(c600);
		countList.add(c700);
		countList.add(c800);
		countList.add(c900);
		for (Integer integer : countList) {
			System.out.println("list" + integer);
		}
		return countList;
	}

	@Override
	public Map<String, List<Integer>> getAverageChart(String mem_id) throws SQLException {
		List<CountVO> myRent = rentBackDAO.myRentList(mem_id);
		List<CountVO> totalRent = rentBackDAO.totalRentList();
		List<CountVO> totalCount = rentBackDAO.totalMemberCount();
		List<Integer> myList = new ArrayList<Integer>();
		List<Integer> totalList = new ArrayList<Integer>();
		for (CountVO vo : myRent) {
			myList.add(vo.getCount());
		}
		for(int i=0; i < totalRent.size(); i++) {
			int avg = totalRent.get(i).getCount() / totalCount.get(i).getCount();
			totalList.add(avg);
		}
		Map<String, List<Integer>> dataMap = new HashMap<String, List<Integer>>();
		dataMap.put("myList", myList);
		dataMap.put("totalList", totalList);
		return dataMap;
	}



}
